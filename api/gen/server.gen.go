// Package gen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package gen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
	strictgin "github.com/oapi-codegen/runtime/strictmiddleware/gin"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// タスク一覧を取得する
	// (GET /tasks)
	ListTasks(c *gin.Context)
	// タスクを作成する
	// (POST /tasks)
	CreateTask(c *gin.Context)
	// タスク詳細を取得する
	// (GET /tasks/{taskId})
	GetTaskDetail(c *gin.Context, taskId string)
	// タスクを更新する
	// (PUT /tasks/{taskId})
	UpdateTask(c *gin.Context, taskId string)
	// 会員登録用のメールを送信する
	// (POST /users/registration-email)
	SendRegistrationEmail(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// ListTasks operation middleware
func (siw *ServerInterfaceWrapper) ListTasks(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.ListTasks(c)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.CreateTask(c)
}

// GetTaskDetail operation middleware
func (siw *ServerInterfaceWrapper) GetTaskDetail(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameter("simple", false, "taskId", c.Param("taskId"), &taskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetTaskDetail(c, taskId)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *gin.Context) {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameter("simple", false, "taskId", c.Param("taskId"), &taskId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter taskId: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.UpdateTask(c, taskId)
}

// SendRegistrationEmail operation middleware
func (siw *ServerInterfaceWrapper) SendRegistrationEmail(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.SendRegistrationEmail(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/tasks", wrapper.ListTasks)
	router.POST(options.BaseURL+"/tasks", wrapper.CreateTask)
	router.GET(options.BaseURL+"/tasks/:taskId", wrapper.GetTaskDetail)
	router.PUT(options.BaseURL+"/tasks/:taskId", wrapper.UpdateTask)
	router.POST(options.BaseURL+"/users/registration-email", wrapper.SendRegistrationEmail)
}

type ListTasksRequestObject struct {
}

type ListTasksResponseObject interface {
	VisitListTasksResponse(w http.ResponseWriter) error
}

type ListTasks200JSONResponse []Task

func (response ListTasks200JSONResponse) VisitListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type ListTasksdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response ListTasksdefaultJSONResponse) VisitListTasksResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type CreateTaskRequestObject struct {
	Body *CreateTaskJSONRequestBody
}

type CreateTaskResponseObject interface {
	VisitCreateTaskResponse(w http.ResponseWriter) error
}

type CreateTask200JSONResponse struct {
	Id string `json:"id"`
}

func (response CreateTask200JSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type CreateTaskdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response CreateTaskdefaultJSONResponse) VisitCreateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type GetTaskDetailRequestObject struct {
	TaskId string `json:"taskId"`
}

type GetTaskDetailResponseObject interface {
	VisitGetTaskDetailResponse(w http.ResponseWriter) error
}

type GetTaskDetail200JSONResponse Task

func (response GetTaskDetail200JSONResponse) VisitGetTaskDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetTaskDetaildefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response GetTaskDetaildefaultJSONResponse) VisitGetTaskDetailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type UpdateTaskRequestObject struct {
	TaskId string `json:"taskId"`
	Body   *UpdateTaskJSONRequestBody
}

type UpdateTaskResponseObject interface {
	VisitUpdateTaskResponse(w http.ResponseWriter) error
}

type UpdateTask200JSONResponse Task

func (response UpdateTask200JSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type UpdateTaskdefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response UpdateTaskdefaultJSONResponse) VisitUpdateTaskResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

type SendRegistrationEmailRequestObject struct {
	Body *SendRegistrationEmailJSONRequestBody
}

type SendRegistrationEmailResponseObject interface {
	VisitSendRegistrationEmailResponse(w http.ResponseWriter) error
}

type SendRegistrationEmail200Response struct {
}

func (response SendRegistrationEmail200Response) VisitSendRegistrationEmailResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type SendRegistrationEmaildefaultJSONResponse struct {
	Body       Error
	StatusCode int
}

func (response SendRegistrationEmaildefaultJSONResponse) VisitSendRegistrationEmailResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(response.StatusCode)

	return json.NewEncoder(w).Encode(response.Body)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// タスク一覧を取得する
	// (GET /tasks)
	ListTasks(ctx context.Context, request ListTasksRequestObject) (ListTasksResponseObject, error)
	// タスクを作成する
	// (POST /tasks)
	CreateTask(ctx context.Context, request CreateTaskRequestObject) (CreateTaskResponseObject, error)
	// タスク詳細を取得する
	// (GET /tasks/{taskId})
	GetTaskDetail(ctx context.Context, request GetTaskDetailRequestObject) (GetTaskDetailResponseObject, error)
	// タスクを更新する
	// (PUT /tasks/{taskId})
	UpdateTask(ctx context.Context, request UpdateTaskRequestObject) (UpdateTaskResponseObject, error)
	// 会員登録用のメールを送信する
	// (POST /users/registration-email)
	SendRegistrationEmail(ctx context.Context, request SendRegistrationEmailRequestObject) (SendRegistrationEmailResponseObject, error)
}

type StrictHandlerFunc = strictgin.StrictGinHandlerFunc
type StrictMiddlewareFunc = strictgin.StrictGinMiddlewareFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// ListTasks operation middleware
func (sh *strictHandler) ListTasks(ctx *gin.Context) {
	var request ListTasksRequestObject

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.ListTasks(ctx, request.(ListTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "ListTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(ListTasksResponseObject); ok {
		if err := validResponse.VisitListTasksResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateTask operation middleware
func (sh *strictHandler) CreateTask(ctx *gin.Context) {
	var request CreateTaskRequestObject

	var body CreateTaskJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTask(ctx, request.(CreateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(CreateTaskResponseObject); ok {
		if err := validResponse.VisitCreateTaskResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetTaskDetail operation middleware
func (sh *strictHandler) GetTaskDetail(ctx *gin.Context, taskId string) {
	var request GetTaskDetailRequestObject

	request.TaskId = taskId

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.GetTaskDetail(ctx, request.(GetTaskDetailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTaskDetail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(GetTaskDetailResponseObject); ok {
		if err := validResponse.VisitGetTaskDetailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// UpdateTask operation middleware
func (sh *strictHandler) UpdateTask(ctx *gin.Context, taskId string) {
	var request UpdateTaskRequestObject

	request.TaskId = taskId

	var body UpdateTaskJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTask(ctx, request.(UpdateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(UpdateTaskResponseObject); ok {
		if err := validResponse.VisitUpdateTaskResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// SendRegistrationEmail operation middleware
func (sh *strictHandler) SendRegistrationEmail(ctx *gin.Context) {
	var request SendRegistrationEmailRequestObject

	var body SendRegistrationEmailJSONRequestBody
	if err := ctx.ShouldBind(&body); err != nil {
		ctx.Status(http.StatusBadRequest)
		ctx.Error(err)
		return
	}
	request.Body = &body

	handler := func(ctx *gin.Context, request interface{}) (interface{}, error) {
		return sh.ssi.SendRegistrationEmail(ctx, request.(SendRegistrationEmailRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SendRegistrationEmail")
	}

	response, err := handler(ctx, request)

	if err != nil {
		ctx.Error(err)
		ctx.Status(http.StatusInternalServerError)
	} else if validResponse, ok := response.(SendRegistrationEmailResponseObject); ok {
		if err := validResponse.VisitSendRegistrationEmailResponse(ctx.Writer); err != nil {
			ctx.Error(err)
		}
	} else if response != nil {
		ctx.Error(fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xXTW/bRhD9K8G0RzZS20vAW1oHhYAegtg9FT5sxZHMRORudpcBBINASKKA+m2ogVO3",
	"BQLn0Dpx4ARtDg3q1j9mJVn+F8XuSjIlUVRSHaKTCGp29s28N0+jXajTgNEQQynA3QVR38GAmMcbnFOu",
	"HxinDLn00byuUw/1p2wzBBeE5H7YhNiBAIUgzaLvYgc43o18jh64n9sMl/HbzjiefnEb61Ln2sTQu4VN",
	"X0hOpE/DGwHxW7fwboRC6gs8FHXuM/0VuNA7/bn/4+H5wd8X3/5x/uBIJScqO1TZqcqOL+4nvbNDlT1V",
	"6XOVHqn0lco64MzUhDr9fF57uP9lJ59RpY9V9pXKnqn0FTjQoDwgEtxRDmdJ7TaqqOQtIu7Md3sKUEHT",
	"fa/wtZBERibBuxwb4MI7lUueKyOSK/rKTRsZOyB92XoN9nwPxrHOFLzJrYuq25yAwjAKdC5JPQoO+OFN",
	"TpschdApaZjXxASFLjZsUAPQIoUt6tEr1xm7cv1mDRy4h1xY4t6/Wr1a1ddShiFhPrjwoXnlACNyx2Co",
	"SCLumKcmGk3pthux1Txw4VNfyC0TocsXjIbCMvJBtWrHIJQYmoOEsZZfN0crt4UlyrZYP/kSg9diwnBg",
	"iyack7ateVqRKj3TEk6f9/66P/ztd5V2h2cPVHIAJrJBopZ8I3BlmOz8F4I4UtkTlZ0abYgoCAhvF4Lr",
	"/7Df//ehSg5U+o1WDWkKQ7uudjt2gFFR0PqPORKJpiVWeijkR9Rrv1FlpWO0oKkqORk+fTb46fv5Mc6N",
	"x4LD/b3vlk6/zTE/H7ENXEFl0+UWusL8HBcBmSW798+vg86eSh6q5FG+UbWN9dKcSrtjqMVqi53RyFd2",
	"9UfNixfO/idoRn8DpbV0RjgJUCLX+RYKoLZhrAxc4zHgQEgC3Vt7G+S7L3mETq4ls0xtr6iG5VZTYi3D",
	"J3+ev3yxptYyAbfUWqICYj9j3qWzvB1W18TNVloQVnbAklVhdSv8P+If/PJysP9i1uXWcwRU2h3DXex0",
	"kUAuKjy3Qr83WXKLf3ULV+4VfoDLii9d7xdLYKZRk408ORmt+cnxoLPX//rRWhBW8q9Epd0x4hkKNW+a",
	"Qp0J+b2xOUW8BS60aJ20dqiQ7rXqtSpoQxmdKzGB44v9x/YauyXn/Avi7fi/AAAA//9lJBGKAQ4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
